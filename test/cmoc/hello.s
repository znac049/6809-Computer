* 6809 assembly program generated by cmoc 0.1.86


	SECTION	start


program_start	EXPORT
_main	IMPORT
INILIB	IMPORT
_exit	IMPORT
program_start	EQU	*
	LDD	#-1024		stack space in bytes
	LBSR	INILIB		initialize standard library and global variables
	LBSR	_main		call main()
	PSHS	B,A		send main() return value to exit()
	LBSR	_exit		use LBSR to respect calling convention


	ENDSECTION




	SECTION	code


_x	EXPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_bsearch	IMPORT
_cmpdww	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enable_printf_float	IMPORT
_exit	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readline	IMPORT
_readword	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_setConsoleOutHook	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_sprintf	IMPORT
_sqrt16	IMPORT
_sqrt32	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_strcspn	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strpbrk	IMPORT
_strrchr	IMPORT
_strspn	IMPORT
_strstr	IMPORT
_strtok	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_zerodw	IMPORT
_say	EXPORT


*******************************************************************************

* FUNCTION say(): defined at hello.c:5
_say	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      4,U:    2 bytes: msg: const char *: line 5
* Line hello.c:7: while
	BRA	L00082		jump to while condition
L00081	EQU	*		while body
* Line hello.c:8: function call: putchar()
	LDB	[4,U]		indirection
	SEX			promoting byte argument to word
	PSHS	B,A		argument 1 of putchar(): const char
	LBSR	_putchar
	LEAS	2,S
* Line hello.c:9: post-increment
	LDX	4,U		variable `msg', declared at hello.c:9
	LEAX	1,X
	STX	4,U
L00082	EQU	*		while condition at hello.c:7
	LDB	[4,U]		indirection
* optim: loadCmpZeroBeqOrBne
	BNE	L00081
* optim: branchToNextLocation
* Useless label L00083 removed
* Useless label L00077 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION say(): defined at hello.c:5
funcend_say	EQU *
funcsize_say	EQU	funcend_say-_say
_main	EXPORT


*******************************************************************************

* FUNCTION main(): defined at hello.c:13
_main	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-2,S
* Local non-static variable(s):
*     -2,U:    2 bytes: x: int: line 15
* Line hello.c:15: init of variable x
	CLRA
	LDB	#$07		7
	STD	-2,U		variable x
* Line hello.c:17: function call: say()
	LEAX	S00079,PCR	"Hej!\r\n"
	PSHS	X		argument 1 of say(): const char[]
	LBSR	_say
	LEAS	2,S
* Line hello.c:18: function call: printf()
	LDD	-2,U		variable `x', declared at hello.c:15
	PSHS	B,A		argument 2 of printf(): int
	LEAX	S00080,PCR	"x=%d\r\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	4,S
* Line hello.c:19: return with value
	CLRA
	LDB	#$2A		decimal 42 signed
* optim: branchToNextLocation
* Useless label L00078 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION main(): defined at hello.c:13
funcend_main	EQU *
funcsize_main	EQU	funcend_main-_main


	ENDSECTION




	SECTION	initgl_start


INITGL	EXPORT
INITGL	EQU	*


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00079	EQU	*
	FCC	"Hej!"
	FCB	$0D
	FCB	$0A
	FCB	0
S00080	EQU	*
	FCC	"x=%d"
	FCB	$0D
	FCB	$0A
	FCB	0
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
_x	EQU	*		x: int: hello.c:3
	FDB	$00		decimal 0
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




	SECTION	initgl_end


	RTS			end of global variable initialization


	ENDSECTION




*******************************************************************************



	SECTION	program_end


program_end	EXPORT
program_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 2 utility routine(s).
_printf	IMPORT
_putchar	IMPORT


*******************************************************************************

	END
