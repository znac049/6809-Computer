* 6809 assembly program generated by cmoc 0.1.86


	SECTION	code


___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_bsearch	IMPORT
_cmpdww	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enable_printf_float	IMPORT
_exit	IMPORT
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_ltoa10	IMPORT
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readline	IMPORT
_readword	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_setConsoleOutHook	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_sprintf	IMPORT
_sqrt32	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_strcspn	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strpbrk	IMPORT
_strrchr	IMPORT
_strspn	IMPORT
_strstr	IMPORT
_strtok	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_zerodw	IMPORT
_sqrt16	EXPORT


*******************************************************************************

* FUNCTION sqrt16(): defined at sqrt16.c:9
_sqrt16	EQU	*
* Assembly-only function.
* Line sqrt16.c:36: inline assembly
* Inline assembly:


        ldd 2,s ; value
        beq @return ; return 0 in D
        leas -4,s
; 0,s (word): mask: bit that shifts right by 2 bits during loop
; 2,s (word): result
; 4,s (word): return address
; 6,s (word): value
        ldd #$4000 ; mask = 1 << 14;
        std ,s
        clr 2,s ; result = 0;
        clr 3,s
        bra @condFirstWhile
@firstWhileLoop
; D contains mask here. Shift it 2 bits right.
        lsra
        rorb
        lsra
        rorb
@condFirstWhile
        cmpd 6,s ; mask > value?
        bhi @firstWhileLoop
;
        bra @condSecondWhile
@secondWhileLoop
; D contains mask here.
        addd 2,s ; result + mask
        cmpd 6,s ; compare with value
        bhi @else
; Do value = value - (result + mask),
; i.e., value = value - D,
; i.e., value = - (D - value):
        subd 6,s ; (result + mask) - value
        coma
        comb
        addd #1 ; negate D, so now D = value - (result + mask)
        std 6,s ; assign to value
;
        ldd 2,s ; result
        lsra
        rorb ; result >> 1
        addd ,s ; add mask
        bra @afterIfElse
@else
        ldd 2,s ; result
        lsra
        rorb
@afterIfElse
        std 2,s ; result
; Do mask >>= 2:
        ldd ,s ; mask
        lsra
        rorb
        lsra
        rorb
@condSecondWhile
        std ,s ; mask
        bne @secondWhileLoop
;
        ldb 3,s ; return low byte of result
        leas 4,s ; discard locals
@return ; return value is in B here
    

* End of inline assembly.
* Useless label L00077 removed
	RTS
* END FUNCTION sqrt16(): defined at sqrt16.c:9
funcend_sqrt16	EQU *
funcsize_sqrt16	EQU	funcend_sqrt16-_sqrt16


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 0 utility routine(s).


*******************************************************************************

	END
