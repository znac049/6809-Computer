* 6809 assembly program generated by cmoc 0.1.86


	SECTION	code


_sqrt32	EXPORT


*******************************************************************************

* FUNCTION sqrt32(): defined at sqrt32.c:4
_sqrt32	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-25,S
* Formal parameter(s):
*      4,U:    4 bytes: value: unsigned long: line 4
* Local non-static variable(s):
*    -25,U:    4 bytes: $V00002: unsigned long: line 18
*    -21,U:    4 bytes: $V00003: unsigned long: line 18
*    -17,U:    4 bytes: $V00004: unsigned long: line 18
*    -13,U:    1 byte : i: unsigned char: line 6
*    -12,U:    4 bytes: rem: unsigned long: line 7
*     -8,U:    4 bytes: root: unsigned long: line 7
*     -4,U:    4 bytes: $V00005: unsigned long: line 33
* Line sqrt32.c:9: assignment: =
	CLRA
	CLRB
	LEAX	-12,U		variable `rem', declared at sqrt32.c:7
	LBSR	initDWordFromSignedWord
* Line sqrt32.c:10: assignment: =
	CLRA
	CLRB
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	LBSR	initDWordFromSignedWord
* Line sqrt32.c:13: for init
* Line sqrt32.c:13: assignment: =
	CLRB
	STB	-13,U		variable i
	LBRA	L00007		jump to for condition
L00006	EQU	*
* Line sqrt32.c:13: for body
* Line sqrt32.c:15: assignment: <<=
	CLRA
	LDB	#$01		decimal 1 signed
	PSHS	B		number of bits to shift
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	PSHS	X		address of input dword to be shifted
	LBSR	leftShiftDWord	preserves X
	LEAS	3,S
* Line sqrt32.c:18: assignment: =
* Push right operand of add.
	LDB	#$1E		optim: lddToLDB
	CLRA			request zero extension
	PSHS	B,A		A=sign/zero ext flag, B=number of bits to shift
	LEAX	4,U		variable `value', declared at sqrt32.c:4
	PSHS	X		address of input dword to be shifted
	LEAX	-17,U		temporary destination, type unsigned long
	LBSR	rightShiftDWord	preserves X
	LEAS	4,S
	PSHS	X
* Push left operand of add.
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B		number of bits to shift
	LEAX	-12,U		variable `rem', declared at sqrt32.c:7
	PSHS	X		address of input dword to be shifted
	LEAX	-21,U		temporary destination, type unsigned long
	LBSR	leftShiftDWord	preserves X
	LEAS	3,S
	PSHS	X
	LEAX	-25,U		temporary destination, type unsigned long
	LBSR	addDWordDWord	preserves X
	LEAS	4,S
	TFR	X,D		make D point to source struct
	LEAX	-12,U		variable `rem', declared at sqrt32.c:7
	LBSR	copyDWord	copy 4-byte struct (preserves X)
* Line sqrt32.c:19: assignment: <<=
	CLRA
	LDB	#$02		decimal 2 signed
	PSHS	B		number of bits to shift
	LEAX	4,U		variable `value', declared at sqrt32.c:4
	PSHS	X		address of input dword to be shifted
	LBSR	leftShiftDWord	preserves X
	LEAS	3,S
* Line sqrt32.c:22: pre-increment
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	LBSR	incrementDWord	inc/dec number at X
* Line sqrt32.c:24: if
* push right operand of comparison
	LEAX	-12,U		variable `rem', declared at sqrt32.c:7
	PSHS	X
* push left operand of comparison
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	PSHS	X
	LBSR	cmpDWordDWord	sets N, Z, V, C; preserves X
	LEAS	4,S
	BHI	L00011		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00010 removed
* Line sqrt32.c:24
* Line sqrt32.c:26: assignment: -=
* Push right operand of sub.
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	PSHS	X
* Push left operand of sub.
	LEAX	-12,U		variable `rem', declared at sqrt32.c:7
	PSHS	X
	LBSR	subDWordDWord	preserves X
	LEAS	4,S
* Line sqrt32.c:27: pre-increment
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	LBSR	incrementDWord	inc/dec number at X
	BRA	L00012		jump over else clause
L00011	EQU	*		else clause of if() started at sqrt32.c:24
* Line sqrt32.c:28
* Line sqrt32.c:30: pre-decrement
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	LBSR	decrementDWord	inc/dec number at X
L00012	EQU	*		end of if() started at sqrt32.c:24
* Useless label L00008 removed
* Line sqrt32.c:13: for increment(s)
	INC	-13,U
L00007	EQU	*
* Line sqrt32.c:13: for condition
	LDB	-13,U		variable i
	CMPB	#$10
	LBLO	L00006
* optim: branchToNextLocation
* Useless label L00009 removed
* Line sqrt32.c:33: return with value
	LDB	#$01		optim: lddToLDB
	CLRA			request zero extension
	PSHS	B,A		A=sign/zero ext flag, B=number of bits to shift
	LEAX	-8,U		variable `root', declared at sqrt32.c:7
	PSHS	X		address of input dword to be shifted
	LEAX	-4,U		temporary destination, type unsigned long
	LBSR	rightShiftDWord	preserves X
	LEAS	4,S
	TFR	X,D		cast to `unsigned int': address of source number in D
	LEAS	-2,S		result of cast
	LEAX	,S
	LBSR	initWordFromDWord
	PULS	A,B		result of cast
* optim: branchToNextLocation
* Useless label L00001 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION sqrt32(): defined at sqrt32.c:4
funcend_sqrt32	EQU *
funcsize_sqrt32	EQU	funcend_sqrt32-_sqrt32


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 10 utility routine(s).
addDWordDWord	IMPORT
cmpDWordDWord	IMPORT
copyDWord	IMPORT
decrementDWord	IMPORT
incrementDWord	IMPORT
initDWordFromSignedWord	IMPORT
initWordFromDWord	IMPORT
leftShiftDWord	IMPORT
rightShiftDWord	IMPORT
subDWordDWord	IMPORT


*******************************************************************************

	END
